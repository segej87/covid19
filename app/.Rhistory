library(sf)
fname <- system.file('shape/nc.shp', package='sf')
nc <- st_read(fname)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
ggplot(nc) + geom_sf()
data(meuse)
head(nc)
ggplot(nc) + geom_sf(mapping = aes(colour = AREA))
ggplot(nc) + geom_sf(mapping = aes(fill = AREA)) + scale_fill_viridis_c()
ggplot(nc) + geom_sf(mapping = aes(fill = BIR79)) + scale_fill_viridis_c()
names(nc)
centroids <- st_centroid(nc)
ggplot() + geom_sf(data = nc, mapping = aes(colour = PERIMETER)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74))
ggplot() + geom_sf(data = nc, mapping = aes(FILL = AREA)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74)) + scale_colour_viridis_c()
ggplot() + geom_sf(data = nc, mapping = aes(FILL = AREA)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74)) + scale_fill_viridis_c()
ggplot() + geom_sf(data = nc, mapping = aes(fill = AREA)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74)) + scale_fill_viridis_c()
nc %>% mutate(nwbr.area = NWBIR74/AREA) -> nc
ggplot(nc) + geom_sf(mapping = aes(fill = nwbr.area)) + scale_fill_viridis_c()
quit()
repos()
install.packages('shiny', 'googleAnalyticsR')
install.packages(c('shiny', 'googleAnalyticsR'))
library(shiny)
library(googleAnalyticsR)
quit('no')
base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t')
utf8::utf8_print(base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t'))
utf8::as_utf8(base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t'))
utf8::output_utf8(base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t'))
setwd('~/Documents/covid19/app')
setwd('~/Documents/Covid19/app')
ls()
packages <- list.dirs('packages')
packages <- list.files('packages')
file.path('packages', packages)
#install.packages(packages, repos = 'http://lib.stat.cmu.edu/R/CRAN/', verbose = FALSE)
install.packages(file.path('packages', packages))
?install.packages
#install.packages(packages, repos = 'http://lib.stat.cmu.edu/R/CRAN/', verbose = FALSE)
install.packages(pkgs = file.path('packages', packages), repos = NULL)
install.packages('yaml')
library(yaml)
cfg <- yaml::read_yaml('cfg.yml')
install_from_binary <- cfg['install_from_binary']
install_from_binary
install_from_binary <- unlist(cfg['install_from_binary'])
install.packages('yaml')
library(yaml)
cfg <- yaml::read_yaml('cfg.yml')
install_from_binary <- unlist(cfg['install_from_binary'])
if (install_from_binary) {
packages <- list.files('packages')
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- repos = 'http://lib.stat.cmu.edu/R/CRAN/'
}
install.packages(pkgs = packages, repos = repos, verbose = FALSE)
install.packages("yaml")
if (install_from_binary) {
packages <- list.files('packages')
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- repos = 'http://lib.stat.cmu.edu/R/CRAN/'
}
if (install_from_binary) {
packages <- list.files('packages')
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- 'http://lib.stat.cmu.edu/R/CRAN/'
}
install.packages('yaml')
library(yaml)
cfg <- yaml::read_yaml('cfg.yml')
install_from_binary <- unlist(cfg['install_from_binary'])
if (install_from_binary) {
packages <- list.files('packages')
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- 'http://lib.stat.cmu.edu/R/CRAN/'
}
install.packages(pkgs = packages, repos = repos, verbose = FALSE)
if (install_from_binary) {
packages <- file.path('packages', list.files('packages'))
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- 'http://lib.stat.cmu.edu/R/CRAN/'
}
packages
?sort
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
countries <- c('US')
state_province <- state_prov_list[countries]
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
get_summary_dat <- function(countries, state_province, break_out_states, break_out_countries) {
if (length(countries) == 1 & break_out_states) {
plot_dat <- suppressWarnings(
state_prov_grouped %>%
filter(Country.Region %in% countries,
Province.State %in% state_province)
)
} else {
plot_dat <- suppressWarnings(
dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province) %>%
group_by(Date, Country.Region) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE),
Deaths = sum(Deaths, na.rm = TRUE),
Recovered = sum(Recovered, na.rm = TRUE),
AggStatePop = sum(StatePopulation, na.rm = TRUE)) %>%
group_by(Country.Region) %>%
mutate(Confirmed_rate = Confirmed - lag(Confirmed, default = 0),
Deaths_rate = Deaths - lag(Deaths, default = 0),
Recovered_rate = Recovered - lag(Recovered, default = 0),
Confirmed_accel = (2 * Confirmed_rate - lag(Confirmed_rate, default = 0) - lag(Confirmed_rate, n = 2, default = 0))/2,
Deaths_accel = (2 * Deaths_rate - lag(Deaths_rate, default = 0) - lag(Deaths_rate, n = 2, default = 0))/2,
Recovered_accel = (2 * Recovered_rate - lag(Recovered_rate, default = 0) - lag(Recovered_rate, n = 2, default = 0))/2) %>%
left_join(dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province) %>%
group_by(Date, Country.Region) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE)) %>%
filter(Confirmed >= 100) %>%
group_by(Country.Region) %>%
summarise(First100Date = min(Date, na.rm = TRUE)),
by = 'Country.Region') %>%
left_join(country_populations, by = 'Country.Region') %>%
mutate(Population = ifelse(AggStatePop == 0, CountryPopulation, AggStatePop)) %>%
mutate(normalized_date = as.numeric(difftime(Date, First100Date, unit = 'days')),
date_lag = difftime(Date, lag(Date), units = 'days'))
)
}
if (!break_out_countries) {
plot_dat <- plot_dat %>%
group_by(Date) %>%
arrange(Date) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE),
Deaths = sum(Deaths, na.rm = TRUE),
Recovered = sum(Recovered, na.rm = TRUE),
Population = sum(Population, na.rm = TRUE)) %>%
mutate(Confirmed_rate = Confirmed - lag(Confirmed, default = 0),
Deaths_rate = Deaths - lag(Deaths, default = 0),
Recovered_rate = Recovered - lag(Recovered, default = 0),
Confirmed_accel = (2 * Confirmed_rate - lag(Confirmed_rate, default = 0) - lag(Confirmed_rate, n = 2, default = 0))/2,
Deaths_accel = (2 * Deaths_rate - lag(Deaths_rate, default = 0) - lag(Deaths_rate, n = 2, default = 0))/2,
Recovered_accel = (2 * Recovered_rate - lag(Recovered_rate, default = 0) - lag(Recovered_rate, n = 2, default = 0))/2) %>%
mutate(Country.Region = 'World') %>%
left_join(dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province) %>%
group_by(Date) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE)) %>%
filter(Confirmed >= 100) %>%
summarise(First100Date = min(Date, na.rm = TRUE)) %>%
mutate(Country.Region = 'World'),
by = 'Country.Region') %>%
mutate(normalized_date = as.numeric(difftime(Date, First100Date, unit = 'days')),
date_lag = difftime(Date, lag(Date), units = 'days'))
}
return(plot_dat)
}
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
plot_dat
countries
countries <- vector('US')
countries <- c('US')
state_province
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
plot_dat <- suppressWarnings(
state_prov_grouped %>%
filter(Country.Region %in% countries,
Province.State %in% state_province)
)
countries <- as.vector('US')
class(countries)
is.vector(countries)
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
test <- state_prov_grouped %>% filter(Country.Region == 'US')
countries <- c('US', 'China')
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
if (length(countries) == 1 & break_out_states) {
plot_dat <- suppressWarnings(
state_prov_grouped %>%
filter(Country.Region %in% countries,
Province.State %in% state_province)
)
} else {
plot_dat <- suppressWarnings(
dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province) %>%
group_by(Date, Country.Region) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE),
Deaths = sum(Deaths, na.rm = TRUE),
Recovered = sum(Recovered, na.rm = TRUE),
AggStatePop = sum(StatePopulation, na.rm = TRUE)) %>%
group_by(Country.Region) %>%
mutate(Confirmed_rate = Confirmed - lag(Confirmed, default = 0),
Deaths_rate = Deaths - lag(Deaths, default = 0),
Recovered_rate = Recovered - lag(Recovered, default = 0),
Confirmed_accel = (2 * Confirmed_rate - lag(Confirmed_rate, default = 0) - lag(Confirmed_rate, n = 2, default = 0))/2,
Deaths_accel = (2 * Deaths_rate - lag(Deaths_rate, default = 0) - lag(Deaths_rate, n = 2, default = 0))/2,
Recovered_accel = (2 * Recovered_rate - lag(Recovered_rate, default = 0) - lag(Recovered_rate, n = 2, default = 0))/2) %>%
left_join(dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province) %>%
group_by(Date, Country.Region) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE)) %>%
filter(Confirmed >= 100) %>%
group_by(Country.Region) %>%
summarise(First100Date = min(Date, na.rm = TRUE)),
by = 'Country.Region') %>%
left_join(country_populations, by = 'Country.Region') %>%
mutate(Population = ifelse(AggStatePop == 0, CountryPopulation, AggStatePop)) %>%
mutate(normalized_date = as.numeric(difftime(Date, First100Date, unit = 'days')),
date_lag = difftime(Date, lag(Date), units = 'days'))
)
}
plot_dat <- suppressWarnings(
state_prov_grouped %>%
filter(Country.Region %in% countries,
Province.State %in% state_province)
)
countries
length(which(plot_dat$Country.Region %in% countries))
length(which(state_prov_grouped$Country.Region %in% countries))
plot_dat <- suppressWarnings(
state_prov_grouped %>%
dplyr::filter(Country.Region %in% countries,
Province.State %in% state_province)
)
head(province.State)
class(state_province)
countries <- c('US')
state_province <- unlist(state_prov_list[countries])
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate')))
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['Date']
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)$coefficients['Date']
confirmed_weekly_accel
ggplot(data = weekly_accel, mapping = aes(x = Date, y = Confirmed_rate)) + geom_point() + geom_abline(slope = confirmed_weekly_accel, intercept = lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['(Intercept)'])
case_cov <- confirmed_weekly_accel/mean(weekly_accel$Confirmed_rate)
deaths_cov <- deaths_weekly_accel/mean(weekly_accel$Deaths_rate)
case_cov
deaths_cov
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) x/max(x))
weekly_accel
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['Date']
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)$coefficients['Date']
confirmed_weekly_acel
confirmed_weekly_accel
deaths_weekly_accel
case_cov <- confirmed_weekly_accel/mean(weekly_accel$Confirmed_rate)
deaths_cov <- deaths_weekly_accel/mean(weekly_accel$Deaths_rate)
case_cov
deaths_cov
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) x/min(x, na.rm = TRUE))
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['Date']
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)$coefficients['Date']
top_1 <- plot_dat %>%
top_n(1, wt = Date)
metric <- c('Confirmed' = '#FED8B1',
'Deaths' = '#DE5246',
'Recovered' = '#228C22')
headers <- list()
contents <- list()
case_cov <- lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['Date']
deaths_cov <- lm(Deaths_rate~Date, data = weekly_accel)$coefficients['Date']
top_1 <- plot_dat %>%
top_n(1, wt = Date)
metric <- c('Confirmed' = '#FED8B1',
'Deaths' = '#DE5246',
'Recovered' = '#228C22')
headers <- list()
contents <- list()
for (m in names(metric)) {
headers[m] <- paste0(
'<font size="6"; face=bold; font-family="lato">',
m,
'</font>'
)
contents[m] <- paste0(
sprintf('<font size="6"; face=bold; color=%s; font-family="lato">', metric[m]),
format(as.numeric(top_1[,m]), big.mark = ','),
'</font>'
)
}
assign('top_1', top_1, envir = .GlobalEnv)
summary_text <- paste0(
'<font size="4"; font-family="lato">In the selected areas there have been<br>',
sprintf('<font color=%s; face=bold; font-family="lato">',metric['Confirmed']), format(top_1$Confirmed_rate, big.mark = ','), '</font>',
' new cases in the past day<br>and ',
sprintf('<font color=%s; face=bold; font-family="lato">',metric['Deaths']), format(top_1$Deaths_rate, big.mark = ','), '</font>',
sprintf(' new deaths. Over the past %s days<br>the new case rate is ', rate_timeframe),
if (case_cov > 0.05) '<font color=#De5246; face=bold; font-family="lato">accelerating</font>' else if (case_cov > -0.05) '<font color=#FED8B1; face=bold; font-family="lato">about steady</font>' else '<font color=#228C22; face=bold; font-family="lato">decelerating</font>',
'<br>and the deaths rate is ',
if (case_cov > 0.05) '<font color=#De5246; face=bold; font-family="lato">accelerating</font>' else if (case_cov > -0.05) '<font color=#FED8B1; face=bold; font-family="lato">about steady</font>' else '<font color=#228C22; face=bold; font-family="lato">decelerating</font>',
'</font>'
)
header_row = paste0(
'<table style="width:100%"><tr>',
paste0(rep('<th></th>', length(metric) + 1), collapse = ''),
'</tr><tr><td align="center"; valign="bottom">',
paste(headers, collapse = '</td><td align="center"; valign="bottom">'),
'</td><td rowspan="3"; align="center">', summary_text ,'</td>',
'</tr><tr><td align="center"; valign="top">',
paste(contents, collapse = '</td><td align="center"; valign="top">'),
'</td><tr>',
paste0(rep('<td></td>', length(metric) + 1), collapse = ''),
'</tr></table>'
)
header_row
runApp()
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) x/min(x, na.rm = TRUE))
case_cov <- lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['Date']
deaths_cov <- lm(Deaths_rate~Date, data = weekly_accel)$coefficients['Date']
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) x/min(x, na.rm = TRUE))
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
case_cov <- confirmed_weekly_accel$coefficients['Date']
deaths_cov <- deaths_weekly_accel$coefficients['Date']
case_cov
countries
ggplot(data = weekly_accel, mapping = aes(x = Date, y = Confirmed_rate)) + geom_point() + geom_abline(slope = case_cov, intercept = confirmed_weekly_accel$coefficients['(Intercept)'])
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) (x - min(x, na.rm = TRUE))/min(x, na.rm = TRUE))
weekly_accel
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
confirmed_weekly_accel
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) (x - min(x, na.rm = TRUE))/max(x, na.rm = TRUE))
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
confirmed_weekly_accel
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) (x - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE)))
weekly_accel
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
confirmed_weekly_accel
deahs_weekly_accel
deaths_weekly_accel
countries <- unique(dat_sum$Country.Province)
unique(state_prov_grouped$Country.Region)
unique(state_prov_grouped$Country.Region) -> countries
state_province <- unlist(state_province_list)
state_province <- unlist(state_prov_list)
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) (x - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE)))
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
case_cov <- confirmed_weekly_accel$coefficients['Date']
deaths_cov <- deaths_weekly_accel$coefficients['Date']
ccase_cov
case_cov
deaths_cov
runApp()
countries <- c('Italy')
state_province <- unlist(state_prov_list['Italy'])
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) (x - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE)))
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
case_cov <- confirmed_weekly_accel$coefficients['Date']
deaths_cov <- deaths_weekly_accel$coefficients['Date']
case_cov
deaths_cov
runApp()

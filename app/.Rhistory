plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
load_data()
source('load_data.R')
test <- map_data
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
runApp()
assign(
'map_data',
dat %>%
mutate(ind = apply(dat, MARGIN = 1, FUN = function(x) {paste(x[c('Latitude', 'Longitude')], collapse = '.')})) %>%
filter(!(Latitude == 0 & Longitude == 0),
!(is.na(Latitude) | is.na(Longitude))) %>%
st_as_sf(coords = c('Longitude', 'Latitude'), crs = st_crs(world_base)) %>%
mutate(CombinedLocation = ifelse(is.na(Admin2), as.character(Location), paste(Admin2, Location, sep = ', '))) %>%
group_by(Country.Region, CombinedLocation)  %>%
mutate(Confirmed_rate = Confirmed - lag(Confirmed, default = 0),
Deaths_rate = Deaths - lag(Deaths, default = 0),
Recovered_rate = Recovered - lag(Recovered, default = 0),
Confirmed_accel = Confirmed_rate - lag(Confirmed_rate, default = 0),
Deaths_accel = Deaths_rate - lag(Deaths_rate, default = 0),
Recovered_accel = Recovered_rate - lag(Recovered_rate, default = 0)) %>%
# left_join(populations, by = c('Country.Region', 'Province.State')) %>%
filter(Date == max(Date, na.rm = TRUE)) %>%
mutate(Location_name = ifelse(Location == 'None', as.character(Country.Region), as.character(Location))),
envir = .GlobalEnv
)
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
map_data <- map_data[Country.Region %in% countries & Province.State %in% state_province & metric >= total_limit,]
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
runApp()
library(yaml)
cfg <- yaml::read_yaml('cfg.yml')
packages <- unlist(cfg['packages'])
for (p in packages) library(p, character.only = TRUE, quietly = TRUE, verbose = FALSE)
source('load_data.R')
runApp()
runApp()
runApp()
runApp()
runApp()
countries <- names(state_prov_list)
state_province <- unlist(state_prov_list)
metric <- c('Confirmed')
break_out_states = TRUE
show_lockdowns = FALSE
normalize_dates = FALSE
normalize_pops = FALSE
normalize_tests = FALSE
break_out_countries = TRUE
type = 'Count'
log_transform = FALSE
zero_on = FALSE
plot_dat <- get_summary_dat(countries, state_province, break_out_states, break_out_countries) %>%
if (type != 'Count') filter(., date_lag == 1) else .
length(countries) == 1 & break_out_states
!break_out_countries
plot_dat <- dat_summ %>%
as.data.table()
names(plot_dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
assign(
'world_base',
st_read('geo/Lat_Long.shp',
quiet = FALSE),
envir = .GlobalEnv
)
cfg <- yaml::read_yaml('cfg.yml')
packages <- unlist(cfg['packages'])
for (p in packages) library(p, character.only = TRUE, quietly = TRUE, verbose = FALSE)
install.packages('rgeos')
library(rgeos)
assign(
'world_base',
gSimplify(st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE), tol = 0.1),
envir = .GlobalEnv
)
assign(
'world_base',
gSimplify(st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE), tol = 0.1),
envir = .GlobalEnv
)
?gSimplify
assign(
'world_base',
gSimplify(st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE), tol = 0.1, topologyPreserve = TRUE),
envir = .GlobalEnv
)
?st_simplify
assign(
'world_base',
st_simplify(st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE), preserveTopology = TRUE, dTolerance = 100),
envir = .GlobalEnv
)
assign(
'world_base',
st_simplify(st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE), preserveTopology = TRUE, dTolerance = 0.1),
envir = .GlobalEnv
)
plot_world_base
plot(world_base)
plot(world_base$ADMIN)
?coord_fixed
runApp()
class(world_base)
runApp()
runApp()
names(world_base)
unique(world_base$NAME)
runApp()
runApp()
class(world_base)
assign(
'world_base',
st_simplify(
st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE) %>% filter(NAME != 'Antarctica'),
preserveTopology = TRUE, dTolerance = 0.1),
envir = .GlobalEnv
)
class(world_base)
runApp()
assign(
'world_base',
st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE) %>% filter(NAME != 'Antarctica') %>%
st_simplify(preserveTopology = TRUE, dTolerance = 0.1),
envir = .GlobalEnv
)
runApp()
st_geometry(world_base)
assign(
'world_base',
st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE) %>% filter(NAME != 'Antarctica') #%>%
# st_simplify(TRUE, dTolerance = 10) %>%
# st_cast("MULTIPOLYGON") %>%
# st_coordinates(),
envir = .GlobalEnv
)
assign(
'world_base',
st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE) %>% filter(NAME != 'Antarctica'), #%>%
# st_simplify(TRUE, dTolerance = 10) %>%
# st_cast("MULTIPOLYGON") %>%
# st_coordinates(),
envir = .GlobalEnv
)
st_geometry(world_base)
runApp()
assign(
'world_base',
st_read('geo/ne_50m_admin_0_countries.shp',
quiet = TRUE) %>% filter(NAME != 'Antarctica') %>%
st_simplify(TRUE, dTolerance = 10) %>%
st_cast("MULTIPOLYGON"),
envir = .GlobalEnv
)
runApp()
runApp()
cfg <- yaml::read_yaml('cfg.yml')
packages <- unlist(cfg['packages'])
for (p in packages) library(p, character.only = TRUE, quietly = TRUE, verbose = FALSE)
source('install_packages.R')
install.packages('future', 'promise', 'multiprocess')
install.packages(c('future', 'promise', 'multiprocess'))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(yaml)
cfg <- yaml::read_yaml('cfg.yml')
packages <- unlist(cfg['packages'])
for (p in packages) library(p, character.only = TRUE, quietly = TRUE, verbose = FALSE)
source('load_data.R')
plot_dat <- state_prov_grouped
if (is.factor(plot_dat[, x_axis]) | x_axis %in% c('Population', 'Density', 'First100Date') | grepl('accel|rate', x_axis) | grepl('accel_rate', y_axis)) {
plot_dat <- plot_dat %>%
filter(Date == max(Date))
}
x_axis <- 'Confirmed'
y_axis <- 'Deaths'
if (is.factor(plot_dat[, x_axis]) | x_axis %in% c('Population', 'Density', 'First100Date') | grepl('accel|rate', x_axis) | grepl('accel_rate', y_axis)) {
plot_dat <- plot_dat %>%
filter(Date == max(Date))
}
x_title <- str_to_title(gsub('[^[:alnum:]]', ' ', x_axis))
y_title <- str_to_title(gsub('[^[:alnum:]]', ' ', y_axis))
legend.position = 'right'
if (is.numeric(plot_dat[, x_axis]) & log_transform_x) plot_dat[, x_axis] <- log(plot_dat[, x_axis])
if (is.numeric(plot_dat[, y_axis]) & log_transform_y) plot_dat[, y_axis] <- log(plot_dat[, y_axis])
runApp()
?box
?tabPanel
dt <- datatable(plot_dat,
colnames = str_to_title(gsub('[.]', '/', gsub('_', ' ', names(plot_dat)))),
options = list(scrollX = TRUE,
scrollY = TRUE)) %>%
formatStyle(columns = 1:nrow(plot_dat), color = 'black') %>%
formatStyle(bad_cols, backgroundColor = styleInterval(bad_brks, bad_clrs)) %>%
formatDate(columns = 'Last.Updated')
plot_dat <- dat %>%
group_by(Date, Country.Region) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE),
Deaths = sum(Deaths, na.rm = TRUE),
Recovered = sum(Recovered, na.rm = TRUE)) %>%
group_by(Country.Region) %>%
mutate(Confirmed_rate = Confirmed - lag(Confirmed, default = 0),
Deaths_rate = Deaths - lag(Deaths, default = 0),
Recovered_rate = Recovered - lag(Recovered, default = 0)) %>%
filter(Date == max(Date)) %>%
arrange(desc(Date), desc(Confirmed_rate)) %>%
rename(Last.Updated = Date) %>%
select(Country.Region, Last.Updated, Confirmed_rate, Deaths_rate, Recovered_rate, Confirmed, Deaths, Recovered)
num_cols <- names(sapply(data.frame(plot_dat), FUN = is.numeric)[which(sapply(data.frame(plot_dat), FUN = is.numeric))])
bad_cols <- num_cols[which(!grepl('Recovered', num_cols))]
good_cols <- num_cols[which(grepl('Recovered', num_cols))]
# Bad cols
bad_brks <- quantile(data.frame(plot_dat)[,bad_cols], probs = seq(.05, .95, .05), na.rm = TRUE)
bad_clrs <- round(seq(255, 40, length.out = length(bad_brks) + 1), 0) %>%
{paste0("rgb(255,", ., ",", ., ")")}
dt <- datatable(plot_dat,
colnames = str_to_title(gsub('[.]', '/', gsub('_', ' ', names(plot_dat)))),
options = list(scrollX = TRUE,
scrollY = TRUE)) %>%
formatStyle(columns = 1:nrow(plot_dat), color = 'black') %>%
formatStyle(bad_cols, backgroundColor = styleInterval(bad_brks, bad_clrs)) %>%
formatDate(columns = 'Last.Updated')
dt
?datatable
dt <- datatable(plot_dat,
colnames = str_to_title(gsub('[.]', '/', gsub('_', ' ', names(plot_dat)))),
options = list(scrollX = TRUE,
scrollY = TRUE),
style = 'bootstrap') %>%
formatStyle(columns = 1:nrow(plot_dat), color = 'black') %>%
formatStyle(bad_cols, backgroundColor = styleInterval(bad_brks, bad_clrs)) %>%
formatDate(columns = 'Last.Updated')
dt
?datatable
plot(dt)
plot.new()
dt
?plot.new
par('bg' = 'white')
plot <- plot.new()
dt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(dat$Admin2)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
countries <- names(state_prov_list)
state_province <- unlist(state_prov_list)
metric <- 'Confirmed'
normalize_pops = FALSE
type = 'Count'
total_limit = 100
if (type == 'Rate') {
metric = paste0(metric, '_rate')
y_title = 'New'
legend.position = 'right'
} else if (type == 'Acceleration') {
metric = paste0(metric, '_accel')
y_title = 'Rate Change'
legend.position = 'right'
} else {
y_title = 'Total'
legend.position = 'none'
}
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric >= total_limit)
)
hovertemplate <- paste0(
'<b>Country/Province:</b> %{Country.Region}',
'<br><b>State/Province:</b> %{Province.State}',
'<br><b>Confirmed:</b> %{Confirmed}'
)
map <- ggplot() +
geom_sf(data = world_base,
fill = '#2b3e50',
colour = 'white',
lwd = 0.2) +
coord_fixed() +
scale_colour_distiller(palette = 'Spectral') +
theme(panel.background = element_rect(fill = '#2b3e50'),
plot.background = element_rect(fill = '#2b3e50'),
strip.background = element_blank(),
axis.line.y = element_line(color = 'white'),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text = element_text(color = 'white'),
axis.title = element_text(color = 'white', face = 'bold'),
panel.grid.major = element_blank(),
title = element_text(color = 'white', face = 'bold'),
legend.position = 'none',
legend.title = element_blank(),
legend.text = element_text(color = 'white', face = 'bold'),
legend.background = element_rect(fill = '#2b3e50'))
if (nrow(plot_dat) > 0) {
xlim <- st_bbox(plot_dat)[c('xmin', 'xmax')]
ylim <- st_bbox(plot_dat)[c('ymin', 'ymax')]
map <- map +
geom_sf(data = plot_dat,
mapping = aes_string(size = 'metric',
colour = 'metric',
text = 'CombinedLocation'),
fill = 'none',
alpha = 0.75) +
coord_sf(xlim = xlim, ylim = ylim)
}
?coord_sf
shiny::runApp()
runApp()
countries <- c('Afghanistan', 'Bahrain')
state_province <- unlist(state_prov_list[countries])
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) (x - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE)))
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
weekly_accel
rate_timeframe <- 4
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(rate_timeframe, wt = Date)
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate'))) %>%
mutate_if(is.numeric, function(x) (x - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE)))
if (length(which(!is.na(weekly_accel$Confirmed_rate))) > 0) {
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
case_cov <- confirmed_weekly_accel$coefficients['Date']
} else {
case_cov <- NA
}
if (length(which(!is.na(weekly_accel$Deaths_rate))) > 0) {
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
deaths_cov <- deaths_weekly_accel$coefficients['Date']
} else {
case_cov <- NA
}
top_1 <- plot_dat %>%
top_n(1, wt = Date)
metric <- c('Confirmed' = '#FED8B1',
'Deaths' = '#DE5246',
'Recovered' = '#228C22')
headers <- list()
contents <- list()
for (m in names(metric)) {
headers[m] <- paste0(
'<font size="6"; face=bold; font-family="lato">',
m,
'</font>'
)
contents[m] <- paste0(
sprintf('<font size="6"; face=bold; color=%s; font-family="lato">', metric[m]),
format(as.numeric(top_1[,m]), big.mark = ','),
'</font>'
)
}
assign('top_1', top_1, envir = .GlobalEnv)
summary_text <- paste0(
'<font size="4"; font-family="lato">In the selected areas there have been<br>',
sprintf('<font color=%s; face=bold; font-family="lato">',metric['Confirmed']), format(top_1$Confirmed_rate, big.mark = ','), '</font>',
' new cases in the past day<br>and ',
sprintf('<font color=%s; face=bold; font-family="lato">',metric['Deaths']), format(top_1$Deaths_rate, big.mark = ','), '</font>',
sprintf(' new deaths. Over the past %s days<br>the new case rate is ', rate_timeframe),
if (is.na(case_cov)) '<font color=#228C22; face = bold; font-family="lato">level at zero</font>' else if (case_cov > 0.05) '<font color=#De5246; face=bold; font-family="lato">accelerating</font>' else if (case_cov > -0.05) '<font color=#FED8B1; face=bold; font-family="lato">about steady</font>' else '<font color=#228C22; face=bold; font-family="lato">decelerating</font>',
'<br>and the death rate is ',
if (is.na(deaths_cov)) '<font color=#228C22; face = bold; font-family="lato">level at zero</font>' else if(deaths_cov > 0.05) '<font color=#De5246; face=bold; font-family="lato">accelerating</font>' else if (deaths_cov > -0.05) '<font color=#FED8B1; face=bold; font-family="lato">about steady</font>' else '<font color=#228C22; face=bold; font-family="lato">decelerating</font>',
'</font>'
)
deaths_cov <- NA
if (length(which(!is.na(weekly_accel$Deaths_rate))) > 0) {
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
deaths_cov <- deaths_weekly_accel$coefficients['Date']
} else {
deaths_cov <- NA
}
top_1 <- plot_dat %>%
top_n(1, wt = Date)
metric <- c('Confirmed' = '#FED8B1',
'Deaths' = '#DE5246',
'Recovered' = '#228C22')
headers <- list()
contents <- list()
for (m in names(metric)) {
headers[m] <- paste0(
'<font size="6"; face=bold; font-family="lato">',
m,
'</font>'
)
contents[m] <- paste0(
sprintf('<font size="6"; face=bold; color=%s; font-family="lato">', metric[m]),
format(as.numeric(top_1[,m]), big.mark = ','),
'</font>'
)
}
assign('top_1', top_1, envir = .GlobalEnv)
summary_text <- paste0(
'<font size="4"; font-family="lato">In the selected areas there have been<br>',
sprintf('<font color=%s; face=bold; font-family="lato">',metric['Confirmed']), format(top_1$Confirmed_rate, big.mark = ','), '</font>',
' new cases in the past day<br>and ',
sprintf('<font color=%s; face=bold; font-family="lato">',metric['Deaths']), format(top_1$Deaths_rate, big.mark = ','), '</font>',
sprintf(' new deaths. Over the past %s days<br>the new case rate is ', rate_timeframe),
if (is.na(case_cov)) '<font color=#228C22; face = bold; font-family="lato">level at zero</font>' else if (case_cov > 0.05) '<font color=#De5246; face=bold; font-family="lato">accelerating</font>' else if (case_cov > -0.05) '<font color=#FED8B1; face=bold; font-family="lato">about steady</font>' else '<font color=#228C22; face=bold; font-family="lato">decelerating</font>',
'<br>and the death rate is ',
if (is.na(deaths_cov)) '<font color=#228C22; face = bold; font-family="lato">level at zero</font>' else if(deaths_cov > 0.05) '<font color=#De5246; face=bold; font-family="lato">accelerating</font>' else if (deaths_cov > -0.05) '<font color=#FED8B1; face=bold; font-family="lato">about steady</font>' else '<font color=#228C22; face=bold; font-family="lato">decelerating</font>',
'</font>'
)
header_row = paste0(
'<table style="width:100%"><tr>',
paste0(rep('<th></th>', length(metric) + 1), collapse = ''),
'</tr><tr><td align="center"; valign="bottom">',
paste(headers, collapse = '</td><td align="center"; valign="bottom">'),
'</td><td rowspan="3"; align="center">', summary_text ,'</td>',
'</tr><tr><td align="center"; valign="top">',
paste(contents, collapse = '</td><td align="center"; valign="top">'),
'</td><tr>',
paste0(rep('<td></td>', length(metric) + 1), collapse = ''),
'</tr></table>'
)
header_Row
header_row
runApp()
shiny::runApp()
runApp()
?pickerInput
shiny::runApp()

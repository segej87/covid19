date_lag = difftime(Date, lag(Date), units = 'days'))
)
}
if (!break_out_countries) {
plot_dat <- plot_dat %>%
group_by(Date) %>%
arrange(Date) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE),
Deaths = sum(Deaths, na.rm = TRUE),
Recovered = sum(Recovered, na.rm = TRUE),
Population = sum(Population, na.rm = TRUE)) %>%
mutate(Confirmed_rate = Confirmed - lag(Confirmed, default = 0),
Deaths_rate = Deaths - lag(Deaths, default = 0),
Recovered_rate = Recovered - lag(Recovered, default = 0),
Confirmed_accel = Confirmed_rate - lag(Confirmed_rate, default = 0),
Deaths_accel = Deaths_rate - lag(Deaths_rate, default = 0),
Recovered_accel = Recovered_rate - lag(Recovered_rate, default = 0)) %>%
mutate(Country.Region = 'World') %>%
left_join(dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province) %>%
group_by(Date) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE)) %>%
filter(Confirmed >= 100) %>%
summarise(First100Date = min(Date, na.rm = TRUE)) %>%
mutate(Country.Region = 'World'),
by = 'Country.Region') %>%
mutate(normalized_date = as.numeric(difftime(Date, First100Date, unit = 'days')),
date_lag = difftime(Date, lag(Date), units = 'days'))
}
return(plot_dat)
}
countries <- names(state_prov_list)
state_province <- unlist(state_prov_list)
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE)
head(plot_dat)
for (m in metric) {
htmls[m] <- paste0(
'<font size=14; face=bold>',
m,
'</font>'
)
}
metric <- c('Confirmed', 'Deaths', 'Recovered')
htmls <- list()
for (m in metric) {
htmls[m] <- paste0(
'<font size=14; face=bold>',
m,
'</font>'
)
}
htmls
metric <- c('Confirmed' = '#FF6600',
'Deaths' = '#8B0000',
'Recovered' = '#228C22')
htmls <- list()
for (m in names(metric)) {
htmls[m] <- paste0(
'<font size=14; face=bold>',
m,
sprintf(': </font><font size=14; color=%s>', metric[m]),
(plot_dat %>% filter(Date == max(Date)))[,m]
)
}
htmls
header_row = paste(
'<table style="width:100%"><tr><th>',
paste(htmls, collapse = '</th><th>'),
'</tr></table>'
)
header_row
header_row = paste0(
'<table style="width:100%"><tr><th>',
paste(htmls, collapse = '</th><th>'),
'</tr></table>'
)
header_row
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
?format
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE)
metric <- c('Confirmed' = '#FF6600',
'Deaths' = '#8B0000',
'Recovered' = '#228C22')
headers <- list()
contents <- list()
for (m in names(metric)) {
headers[m] <- paste0(
'<font size="5"; face=bold>',
m,
'</font>'
)
contents[m] <- paste0(
sprintf('<font size="5"; color=%s>', metric[m]),
format(as.numeric((plot_dat %>% top_n(1, wt = Date)))[,m], big.mark = ','),
'</font>'
)
}
m
headers[m] <- paste0(
'<font size="5"; face=bold>',
m,
'</font>'
)
headers
contents[m] <- paste0(
sprintf('<font size="5"; color=%s>', metric[m]),
format(as.numeric((plot_dat %>% top_n(1, wt = Date)))[,m], big.mark = ','),
'</font>'
)
sprintf('<font size="5"; color=%s>', metric[m])
format(as.numeric((plot_dat %>% top_n(1, wt = Date)))[,m], big.mark = ',')
as.numeric((plot_dat %>% top_n(1, wt = Date))[,m])
format(as.numeric((plot_dat %>% top_n(1, wt = Date))[,m]), big.mark = ',')
runApp('Documents/Covid19/app')
headers <- list()
contents <- list()
for (m in names(metric)) {
headers[m] <- paste0(
'<font size="5"; face=bold>',
m,
'</font>'
)
contents[m] <- paste0(
sprintf('<font size="5"; color=%s>', metric[m]),
format(as.numeric((plot_dat %>% top_n(1, wt = Date))[,m]), big.mark = ','),
'</font>'
)
}
headers
contents
header_row = paste0(
'<table style="width:100%"><tr><th>',
paste(headers, collapse = '</th><th>'),
'</tr><tr><td>',
paste(contents, collapse = '</td>'),
'</tr>'
)
header_row
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE)
metric <- c('Confirmed' = '#FF6600',
'Deaths' = '#DE5246',
'Recovered' = '#228C22')
headers <- list()
contents <- list()
for (m in names(metric)) {
headers[m] <- paste0(
'<font size="6"; face=bold>',
m,
'</font>'
)
contents[m] <- paste0(
sprintf('<font size="6"; face=bold; color=%s>', metric[m]),
format(as.numeric((plot_dat %>% top_n(1, wt = Date))[,m]), big.mark = ','),
'</font>'
)
}
header_row = paste0(
'<table style="width:100%"><tr>',
paste0(rep('<th></th>', length(metric) + 1)),
'</tr><tr><td>',
paste(headers, collapse = '</td><td>'),
'</td></tr><tr><td>',
paste(contents, collapse = '</td><td>'),
'</td><td rowspan="2">TESTING all of this <br><br><br><br>what the heck is going on omg wow</td></table>'
)
header_row
header_row = paste0(
'<table style="width:100%"><tr>',
paste0(rep('<th></th>', length(metric) + 1), collapse = ''),
'</tr><tr><td>',
paste(headers, collapse = '</td><td>'),
'</td></tr><tr><td>',
paste(contents, collapse = '</td><td>'),
'</td><td rowspan="2">TESTING all of this <br><br><br><br>what the heck is going on omg wow</td></table>'
)
header_row
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
header_row
runApp('Documents/Covid19/app')
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(1, wt = Date)
metric <- c('Confirmed' = '#FF6600',
'Deaths' = '#DE5246',
'Recovered' = '#228C22')
headers <- list()
contents <- list()
for (m in names(metric)) {
headers[m] <- paste0(
'<font size="6"; face=bold>',
m,
'</font>'
)
contents[m] <- paste0(
sprintf('<font size="6"; face=bold; color=%s>', metric[m]),
format(as.numeric(plot_dat[,m]), big.mark = ','),
'</font>'
)
}
contents
names(plot_dat)
summary_text <- paste(
'In the selected regions there have been',
sprintf('<font color=%s>',metric['Confirmed']),plot_dat['Confirmed_rate'],'</font>',
'new cases and',
sprintf('<font color=%s>',metric['Deaths']),plot_dat['Deaths_rate'],'</font>',
'new deaths. The new case rate is',
if (plot_dat$Confirmed_accel > 0) '<font color=#De5246>accelerating</font>' else '<font color=#228C22>decelerating</font>',
'and the deaths rate is',
if (plot_dat$Confirmed_accel > 0) '<font color=#De5246>accelerating</font>' else '<font color=#228C22>decelerating</font>'
)
summary_text
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
?select_if
weekly_accel <- plot_dat %>%
select_if(gepl('accel'))
weekly_accel <- plot_dat %>%
select_if(grepl('accel'))
weekly_accel <- plot_dat %>%
select_if(vars(contains('accel')))
weekly_accel <- plot_dat %>%
select_at(vars(contains('accel')))
head(weekly_accel)
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(7, wt = Date)
weekly_accel <- plot_dat %>%
select_at(vars(contains('accel')))
top_1 <- plot_dat %>%
top_n(1, wt = Date)
weekly_accel
weekly_accel <- plot_dat %>%
select_at(vars(contains('accel'), contains('Date')))
weekly_accel
weekly_accel <- plot_dat %>%
select_at(vars(contains('accel'), equals('Date')))
weekly_accel <- plot_dat %>%
select_at(vars(contains('accel'), starts_with('Date')))
weekly_accel
weekly_accel <- plot_dat %>%
select_at(vars(equal_to('Date'), contains('accel')))
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('accel')))
weekly_accel
lm(Confirmed_accel~Date, data = weekly_accel)
3705-131
/7
3574/7
weekly_accel <- plot_dat %>%
select_at(vars('Date', contains('_rate')))
lm(Confirmed_rate~Date, data = weekly_accel)
ggplot(data = weekly_accel, mapping = aes(x = Date, y = Confirmed_rate)) + geom_point() + geom_abline(slope = 6140, intercept = -112589384)
top_1[,'Confirmed_accel']
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)
deaths-weekly_accel
deaths_weekly_accel
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['Date']
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)$coefficients['Date']
confirmed_weekly_accel <- lm(Confirmed_rate~Date, data = weekly_accel)$coefficients['Date']
deaths_weekly_accel <- lm(Deaths_rate~Date, data = weekly_accel)$coefficients['Date']
confirmed_weekly_accel/mean(weekly_accel$Confirmed_rate)
confirmed_cov <- confirmed_weekly_accel/mean(weekly_accel$Confirmed_rate)
confirmed_cov <- deaths_weekly_accel/mean(weekly_accel$Deaths_rate)
confirmed_cov
case_cov <- confirmed_weekly_accel/mean(weekly_accel$Confirmed_rate)
deaths_cov <- deaths_weekly_accel/mean(weekly_accel$Deaths_rate)
case_cov
deaths_cov
countries <- c('China')
state_province <- state_prov_list['China']
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE) %>%
top_n(7, wt = Date)
plot_dat
countries
state_province
plot_dat <- get_summary_dat(countries, state_province, break_out_states = FALSE, break_out_countries = FALSE)
dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province)
unique(dat_summ$Country.Region)
countries
countries <- c('China')
countries
class(countries)
dat_summ %>%
filter(Country.Region %in% countries,
Province.State %in% state_province)
state_province
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
shiny::runApp('Documents/Covid19/app')
top_1['Confirmed_rate']
runApp('Documents/Covid19/app')
top_1
top_1['Confirmed_rate']
format(top_1['Confirmed_rate'], big.mark = ',')
format(top_1$Confirmed_rate, big.mark = ',')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
metric <- 'Confirmed'
total_limit = 100
head(map_data[which(map_data[,metric] >= total_limit),])
head(map_data[,metric])
head(map_data[which(map_data[,..metric] >= total_limit),])
plot_dat <- suppressWarnings(
map_data %>%
rename_if(metric, 'Metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
Confirmed > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
plot_dat <- suppressWarnings(
map_data %>%
rename_if(metric, 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
Confirmed > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
?rename_if
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
Confirmed > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function() 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
Confirmed > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
Confirmed > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
countries <- c('US')
state_province <- state_prov_list[countries]
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
Confirmed > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
type = 'Count'
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
if (type == 'Rate') {
metric = paste0(metric, '_rate')
y_title = 'New'
legend.position = 'right'
} else if (type == 'Acceleration') {
metric = paste0(metric, '_accel')
y_title = 'Rate Change'
legend.position = 'right'
} else {
y_title = 'Total'
legend.position = 'none'
}
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
metric
metric <- 'Confirmed_rate'
metric <- 'Confirmed'
type = 'rate'
type = 'Rate'
if (type == 'Rate') {
metric = paste0(metric, '_rate')
y_title = 'New'
legend.position = 'right'
} else if (type == 'Acceleration') {
metric = paste0(metric, '_accel')
y_title = 'Rate Change'
legend.position = 'right'
} else {
y_title = 'Total'
legend.position = 'none'
}
plot_dat <- suppressWarnings(
map_data %>%
rename_at(metric, function(vars) 'metric') %>%
filter(Country.Region %in% countries,
Province.State %in% state_province,
metric > total_limit) %>%
if(type != 'Count') filter(., date_lag == 1) else .
)
hovertemplate <- paste0(
'<b>Country/Province:</b> %{Country.Region}',
'<br><b>State/Province:</b> %{Province.State}',
'<br><b>Confirmed:</b> %{Confirmed}'
)
xlim <- st_bbox(plot_dat)[c('xmin', 'xmax')]
ylim <- st_bbox(plot_dat)[c('ymin', 'ymax')]
map <- ggplot() +
geom_sf(data = world_base,
fill = '#2b3e50',
colour = 'white',
lwd = 0.2) +
geom_sf(data = plot_dat,
mapping = aes_string(size = 'metric',
colour = 'metric',
text = 'CombinedLocation'),
fill = 'none',
alpha = 0.75) +
coord_sf(xlim = xlim, ylim = ylim) +
scale_colour_distiller(palette = 'Spectral') +
theme(panel.background = element_rect(fill = '#2b3e50'),
plot.background = element_rect(fill = '#2b3e50'),
strip.background = element_blank(),
axis.line.y = element_line(color = 'white'),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text = element_text(color = 'white'),
axis.title = element_text(color = 'white', face = 'bold'),
panel.grid.major = element_blank(),
title = element_text(color = 'white', face = 'bold'),
legend.position = 'none',
legend.title = element_blank(),
legend.text = element_text(color = 'white', face = 'bold'),
legend.background = element_rect(fill = '#2b3e50'))
ggplotly(map, tooltip = append('size', 'CombinedLocation'))
head(plot_dat)
runApp('Documents/Covid19/app')
runApp('Documents/Covid19/app')
assign(
'map_data',
dat %>%
mutate(ind = apply(dat, MARGIN = 1, FUN = function(x) {paste(x[c('Latitude', 'Longitude')], collapse = '.')})) %>%
filter(!(Latitude == 0 & Longitude == 0),
!(is.na(Latitude) | is.na(Longitude))) %>%
st_as_sf(coords = c('Longitude', 'Latitude'), crs = st_crs(world_base)) %>%
mutate(CombinedLocation = ifelse(is.na(Admin2), as.character(Location), paste(Admin2, Location, sep = ', '))) %>%
group_by(Country.Region, CombinedLocation)  %>%
mutate(Confirmed_rate = Confirmed - lag(Confirmed, default = 0),
Deaths_rate = Deaths - lag(Deaths, default = 0),
Recovered_rate = Recovered - lag(Recovered, default = 0),
Confirmed_accel = Confirmed_rate - lag(Confirmed_rate, default = 0),
Deaths_accel = Deaths_rate - lag(Deaths_rate, default = 0),
Recovered_accel = Recovered_rate - lag(Recovered_rate, default = 0)) %>%
# left_join(populations, by = c('Country.Region', 'Province.State')) %>%
filter(Date == max(Date, na.rm = TRUE)) %>%
mutate(Location_name = ifelse(Location == 'None', as.character(Country.Region), as.character(Location))),
envir = .GlobalEnv
)
shiny::runApp('Documents/Covid19/app')
getwd()
setwd('~/Documents/Covid19')
setwd('app')
shiny::runApp()

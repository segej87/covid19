library(sf)
fname <- system.file('shape/nc.shp', package='sf')
nc <- st_read(fname)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
ggplot(nc) + geom_sf()
data(meuse)
head(nc)
ggplot(nc) + geom_sf(mapping = aes(colour = AREA))
ggplot(nc) + geom_sf(mapping = aes(fill = AREA)) + scale_fill_viridis_c()
ggplot(nc) + geom_sf(mapping = aes(fill = BIR79)) + scale_fill_viridis_c()
names(nc)
centroids <- st_centroid(nc)
ggplot() + geom_sf(data = nc, mapping = aes(colour = PERIMETER)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74))
ggplot() + geom_sf(data = nc, mapping = aes(FILL = AREA)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74)) + scale_colour_viridis_c()
ggplot() + geom_sf(data = nc, mapping = aes(FILL = AREA)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74)) + scale_fill_viridis_c()
ggplot() + geom_sf(data = nc, mapping = aes(fill = AREA)) + geom_sf(data = centroids, mapping = aes(colour = NWBIR74)) + scale_fill_viridis_c()
nc %>% mutate(nwbr.area = NWBIR74/AREA) -> nc
ggplot(nc) + geom_sf(mapping = aes(fill = nwbr.area)) + scale_fill_viridis_c()
quit()
repos()
install.packages('shiny', 'googleAnalyticsR')
install.packages(c('shiny', 'googleAnalyticsR'))
library(shiny)
library(googleAnalyticsR)
quit('no')
base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t')
utf8::utf8_print(base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t'))
utf8::as_utf8(base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t'))
utf8::output_utf8(base64enc::base64decode('Ym90Z3VhcmQtY29udGFjdEBnb29nbGUuY29t'))
setwd('~/Documents/covid19/app')
setwd('~/Documents/Covid19/app')
ls()
packages <- list.dirs('packages')
packages <- list.files('packages')
file.path('packages', packages)
#install.packages(packages, repos = 'http://lib.stat.cmu.edu/R/CRAN/', verbose = FALSE)
install.packages(file.path('packages', packages))
?install.packages
#install.packages(packages, repos = 'http://lib.stat.cmu.edu/R/CRAN/', verbose = FALSE)
install.packages(pkgs = file.path('packages', packages), repos = NULL)
install.packages('yaml')
library(yaml)
cfg <- yaml::read_yaml('cfg.yml')
install_from_binary <- cfg['install_from_binary']
install_from_binary
install_from_binary <- unlist(cfg['install_from_binary'])
install.packages('yaml')
library(yaml)
cfg <- yaml::read_yaml('cfg.yml')
install_from_binary <- unlist(cfg['install_from_binary'])
if (install_from_binary) {
packages <- list.files('packages')
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- repos = 'http://lib.stat.cmu.edu/R/CRAN/'
}
install.packages(pkgs = packages, repos = repos, verbose = FALSE)
install.packages("yaml")
if (install_from_binary) {
packages <- list.files('packages')
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- repos = 'http://lib.stat.cmu.edu/R/CRAN/'
}
if (install_from_binary) {
packages <- list.files('packages')
repos <- NULL
} else {
packages <- unlist(cfg['packages'])
repos <- 'http://lib.stat.cmu.edu/R/CRAN/'
}
